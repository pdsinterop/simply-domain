<pre class='metadata'>
Title: Simply-Domain
Boilerplate: issues-index no
Boilerplate: style-darkmode off
Shortname: simply-domain
Level: 1
Repository: https://github.com/pdsinterop/simply-domain/specification/issues
Markup Shorthands: markdown yes
Max ToC Depth: 2
Editor: [Sjoerd van Groning](https://github.com/sjoerdvangroning) ([Muze](https://www.muze.nl/))
Status: LD
Abstract:
  Humans want simple names for Internet resources. That is why we are 
  using domain names. With Simply Solid Domains, we strive to make it 
  easier to access content with long paths, content identifiers (CID) 
  and protocols not standard supported in the browser. 
  We do this by storing protocols and location in a TXT field and 
  using a proxy to decode the information. This way every browser or 
  user can access the content with a simple name.

Status Text:
  This section describes the status of this document at the time of its publication.

  This document was published by the [PDS Interop Group](https://pdsinterop.org)
  for review as a preliminary draft. There has been no review yet, 
  and the information in this document is subject to change. You are 
  invited to [contribute](https://github.com/pdsinterop/simply-domain/issues) any
  feedback, comments or questions you may have.
</pre>

# Introduction # {#intro}

This document outlines in detail how a user can configure DNS to make 
content available to browsers. 
The client uses a custom/short URL. The content owner can use a protocol 
which the browser might not support. 
Content owners can serve content stored on a long URL. The proxy 
will fetch the content and serve it over http(s).

## Advantages: ## {#Intro-advantages}
- Proxy is stateless
- Very easy for endusers
- Publish from (new/any) protocol to the web

# Definitions # {#definitions}

<dl>
<dt>proxy</dt>
<dd>A proxy, fetching the desired content conform this specification</dd>
<dt>destination</dt>
<dd>The public path to the destination where the users wants to fetch the content from</dd>
<dt>priority</dt>
<dd>Used to determine from which url a resource is fetched.</dd>
<dt>url</dt>
<dd>Uniform Resource Locator, used to describe the protocol and (real) content location.</dd>
</dl>

# Setting the correct dns records # {#sd-dns-records}

To instruct the proxy to fetch the correct content, the content owner must set two dns records.

A-record pointing to an IP of a proxy

TXT-record containing the following content "<destination> <priority> <URL>"

<div class=example>
For example, we want the user to go to https://www.resource.com/presentation.html.
Our proxy is located at the ip 1.2.3.4 and the real content is located at: 
```
https://www.example.com/user/projects/project54/container/presentation.html
```

The we must create an A record and a TXT record
```
www.resource.com A record 1.2.3.4
resource.com TXT record "www.resource.com 20 https://www.example.com/user/projects/project54/container/"
```
</div>

<div class=example>
For example, we want the user to go to https://www.resource.com.
Our proxy is located at the ip 1.2.3.4 and the real content is located at: 
```
ipfs://bafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi
```

The we must create an A record and a TXT record
```
www.resource.com A record 1.2.3.4
resource.com TXT record "www.resource.com 20 ipfs://bafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi"
```
</div>

# Setting up the hosting # {#sd-hosting-sites}

On the URL on the hosting, we require that a file exists and that the 
domain a user requests is in it. This file can contain multiple domain 
names, for example nl.resource.com, www.resource.com resource.com etc.

```http
cat .sites
www.resource.com
```


# Serving content # {#sd-serving-content}

## Requesting the content ## {#sd-content-request}

Just as with any request, the URL is entered in the browser. The 
browser will perform a dns lookup, retrieve the A record (with the 
ip of the proxy).

The browser will perform a HTTP request with the proxy, where the 
significant fields are listed below:

```http request
GET /presentation.html HTTP/1.1
Host: www.resource.com
```
## Getting TXT record from DNS ## {#sd-fetch-txt-record}

First thing the proxy needs to do, is fetch the corresponding 
TXT record(s) and this will look as follows:

``` http
"www.resource.com 20 https://www.example.com/user/projects/project54/container/"
```
## Lowest priority first ## {#sd-lowest-priority}

When there are multiple txt records with the same destination, 
the TXT record with the lowests priority should be chosen.
 
The intention is you have a fallback website on a different protocol/location.

## Verify domain ## {#sd-domain-verification}

We want to verify that the indicated hosting is indeed meant to serve the domain. 
We do this by matching the domain from the TXT record [Proof of DNS] with a list of 
sites in a file on the hosting [Proof of hosting].

```http
GET https://www.example.com/user/projects/project54/container/.sites

compare content of .sites with www.resource.com
```

When there is a mismatch, the proxy should return with an error indicating the content is not to be found here.

```http
HTTP://1.1 404 Requested content not served here.
```

## Fetch content ## {#sd-fetch-content}

When the Proof of domain matches the Proof of hosting, we can fetch the content.

```http
GET https://www.example.com/user/projects/project54/container/presentation.html

```
</div>

## Deliver the content ## {#sd-deliver-content}

Now that we have the desired content, we can send it to the client via http(s) as requested.
